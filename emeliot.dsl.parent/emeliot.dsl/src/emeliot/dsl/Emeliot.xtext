grammar emeliot.dsl.Emeliot with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate read "http://www.emeliot.dsl/Emeliot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
Model returns Model:
	
	'model' name=EString ':'
	specification=Specification		
	mutations+=Mutation*
	discovery=Discovery	
	;

Mutation returns Mutation:
	'mutation' name=EString
	// AGGIUNGERE TIME SERIES
	'time_series' ('path' timeSeriesPath=STRING | 'values'	timeSeriesValues=TimeSeries)
	operation=XBlockExpression;

TimeSeries returns TimeSeries:
	{TimeSeries} name=EString
//  'linked_to' port=[Port|EString]

	('[' timeValues+=TimeValue ("," timeValues+=TimeValue)* ']')?;

TimeValue returns TimeValue:
	{TimeValue} name=EString
	
	'(' time=INT ':' value=(EDouble) ')';
	
	
EString returns ecore::EString:
	STRING | ID;


DataType returns DataType:
	IntegerType  | BooleanType;

Specification returns Specification:
	{Specification}
	'specification'	
	//importSection=XImportSection?
	//('package' name=QualifiedName ';'?)?
	('simulationPlatform' simulationPlatform=EString)?
	('projectName' projectName=EString)?
	//('import' '{' ^import+=Import ("," ^import+=Import)* '}')?
	('components' '[' components+=Component  ']')?;
	
Component returns Component:
	{Component}
	'name' name=EString
	('ports' '[' ports+=Port ("," ports+=Port)* ']')?
	;
	
Port returns Port:
	{Port}
	'Port'
	name=EString
	
	('type' type=PORT_TYPE)?
	('times' times=ELong)?
	('eps' eps=EDouble)?
	;


Discovery returns Discovery:
	{Discovery}
	'discovery'
	name=EString
	//('appliedTo' appliedTo=[Port|EString])?		
	//('outputSeries' expSeries=[TimeSeries|EString])?	
	('expectedSeries' '[' series+=TimeValue ("," series+=TimeValue)* ']')?	
	expression=XBlockExpression
	;

Import returns Import:
	{Import}
	'Import'
	'{'
	('qualifiedName' qualifiedName=EString)?
	'}';
	
enum PORT_TYPE returns PORT_TYPE:
	INPUT='INPUT' | OUTPUT='OUTPUT';

ELong returns ecore::ELong:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	
	
	
IntegerType returns IntegerType:
	{IntegerType}
	value=EInt;



BooleanType returns BooleanType:
	{BooleanType}
	value=EBoolean;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

	
	


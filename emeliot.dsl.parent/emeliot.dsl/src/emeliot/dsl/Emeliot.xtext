grammar emeliot.dsl.Emeliot with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate read "http://www.emeliot.dsl/Emeliot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Model returns Model:
	'model' name=EString ':' 
	specification=Specification
	'time_series' ':' timeSeries+=TimeSeries*
	mutations+=Mutation*
	discoveries+=Discovery*
	'config' ':' configurations+=Configuration*
	'simultation_platfrom' ':' simulationPlatform=EString
	'project_file' ':' projectFile=EString;

Configuration returns Configuration:
	ConfigMutation | ConfigDiscovery;

ConfigMutation returns ConfigMutation:
	'mut' mut=[Mutation] ('port' port = EString)? 'timeSeries' timeSeries = [TimeSeries] ;

ConfigDiscovery returns ConfigDiscovery:
	'discovery' discovery=[Discovery] ('port' port = EString)?
	'expectedSeries' expectedTimeSeries = [TimeSeries] // produced by Protheus on original input without mutation
	'mutatedSeries' mutatedTimeSeries = [TimeSeries] // produced by Prothues on mutated input
;

Mutation returns Mutation:
	'mutation' name=EString
	operation=XBlockExpression;


 
 
TimeSeries returns TimeSeries:
	name=EString
	('path' timeSeriesPath=STRING)?
	('[' timeValues+=TimeValue ("," timeValues+=TimeValue)* ']')?;

//TimeSeriesPath returns TimeSeriesPath:
//	name=EString
//	'path' timeSeriesPath=STRING;
//	
//TimeSeriesValue returns TimeSeriesValue:
//	{TimeSeriesValue} name=EString
//	('[' timeValues+=TimeValue ("," timeValues+=TimeValue)* ']')?;

TimeValue returns TimeValue:
	{TimeValue} // name=EString
	'(' time=EDouble ':' value=(EDouble) ')';

EString returns ecore::EString:
	STRING | ID;

Specification returns Specification:
	{Specification}
	'specification'
	('projectName' projectName=EString)?
	// ('import' '{' ^import+=Import ("," ^import+=Import)* '}')?
	'components' ':' components+=Component*;

Component returns Component:
	{Component}
	name=EString
	'ports' ':' ports+=Port*;

Port returns Port:
	'port' name=EString type=PORT_TYPE;

Discovery returns Discovery:
	{Discovery}
	'discovery'
	name=EString
	expression=XBlockExpression;

Import returns Import:
	{Import}
	'Import'
	'{'
	('qualifiedName' qualifiedName=EString)?
	'}';

enum PORT_TYPE returns PORT_TYPE:
	INPUT='INPUT' | OUTPUT='OUTPUT';

ELong returns ecore::ELong:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

IntegerType returns IntegerType:
	{IntegerType}
	value=EInt;

BooleanType returns BooleanType:
	{BooleanType}
	value=EBoolean;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

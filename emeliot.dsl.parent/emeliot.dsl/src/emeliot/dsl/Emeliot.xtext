grammar emeliot.dsl.Emeliot with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate read "http://www.emeliot.dsl/Emeliot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Model returns Model:
	'model' name=EString ':'
	specification=Specification
	mutations+=Mutation*
	discoveries+=Discovery*
	'config' ':' configurations+=Configuration*;

Configuration returns Configuration:
	ConfigMutation | ConfigDiscovery;

ConfigMutation returns ConfigMutation:
	'mut' mut=[Mutation]
	// 'port' port = [Port]
	timeSeries = TimeSeries ;
	//('path' timeSeriesPath=STRING | 'values' timeSeriesValues=TimeSeries);

ConfigDiscovery returns ConfigDiscovery:
	'discovery' discovery=[Discovery]
	'expectedSeries' ('path' timeSeriesPath=STRING | 'values' timeSeriesValues=TimeSeries) // produced by Protheus on original input without mutation
	'mutatedSeries' ('path' timeSeriesPath=STRING | 'values' timeSeriesValues=TimeSeries) // produced by Prothues on mutated input
;

Mutation returns Mutation:
	'mutation' name=EString
	// AGGIUNGERE TIME SERIES
	operation=XBlockExpression;

/*Mutation returns Mutation:
 * 	'mutation' name=EString
 * 	// AGGIUNGERE TIME SERIES
 * 	'time_series' ('path' timeSeriesPath=STRING | 'values'	timeSeriesValues=TimeSeries)
 operation=XBlockExpression;*/
 
 
TimeSeries returns TimeSeries:	
	TimeSeriesPath  | TimeSeriesValue;

TimeSeriesPath returns TimeSeriesPath:
	name=EString
	'path' timeSeriesPath=STRING;

TimeSeriesValue returns TimeSeriesValue:
	{TimeSeriesValue} name=EString
//  'linked_to' port=[Port|EString]
	('[' timeValues+=TimeValue ("," timeValues+=TimeValue)* ']')?;

TimeValue returns TimeValue:
	{TimeValue} // name=EString
	'(' time=INT ':' value=(EDouble) ')';

EString returns ecore::EString:
	STRING | ID;

Specification returns Specification:
	{Specification}
	'specification'
	// importSection=XImportSection?
	// ('package' name=QualifiedName ';'?)?
	('simulationPlatform' simulationPlatform=EString)?
	('projectName' projectName=EString)?
	// ('import' '{' ^import+=Import ("," ^import+=Import)* '}')?
	('components' '[' components+=Component ']')?;

Component returns Component:
	{Component}
	'name' name=EString
	('ports' '[' ports+=Port ("," ports+=Port)* ']')?;

Port returns Port:
	{Port}
	'Port'
	name=EString
	('type' type=PORT_TYPE)?
	('times' times=ELong)?
	('eps' eps=EDouble)?;

Discovery returns Discovery:
	{Discovery}
	'discovery'
	name=EString
	// ('appliedTo' appliedTo=[Port|EString])?		
	// ('outputSeries' expSeries=[TimeSeries|EString])?	
	// ('expectedSeries' '[' series+=TimeValue ("," series+=TimeValue)* ']')?	
	expression=XBlockExpression;

Import returns Import:
	{Import}
	'Import'
	'{'
	('qualifiedName' qualifiedName=EString)?
	'}';

enum PORT_TYPE returns PORT_TYPE:
	INPUT='INPUT' | OUTPUT='OUTPUT';

ELong returns ecore::ELong:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

IntegerType returns IntegerType:
	{IntegerType}
	value=EInt;

BooleanType returns BooleanType:
	{BooleanType}
	value=EBoolean;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

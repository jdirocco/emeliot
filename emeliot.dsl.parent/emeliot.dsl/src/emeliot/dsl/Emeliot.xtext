grammar emeliot.dsl.Emeliot with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate read "http://www.emeliot.dsl/Emeliot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Model returns Model:
	'model' name=EString ':' 
	specification=Specification
	'time_series' ':' timeSeries+=TimeSeries*
	injections+=Injection*
	discoveries+=Discovery*
	'config' ':' configurations+=Configuration*
	'simultation_platfrom' ':' simulationPlatform=EString
	'project_file' ':' projectFile=EString;
	
	
enum PORT_TYPE returns PORT_TYPE:
	INPUT='INPUT' | OUTPUT='OUTPUT';
	
EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;	

Port returns Port:
	'port' name=EString type=PORT_TYPE;

	
Component returns Component:
	{Component}
	name=EString
	'ports' ':' ports+=Port*;
	

Configuration returns Configuration:
	ConfigInjection| ConfigDiscovery;

ConfigInjection returns ConfigMutation:
	'inj' mut=[Injection] ('port' port = EString)? 'timeSeries' timeSeries = [TimeSeries] ;

ConfigDiscovery returns ConfigDiscovery:
	'discovery' discovery=[Discovery] ('port' port = EString)?
	'expectedSeries' expectedTimeSeries = [TimeSeries] 
	'injectedSeries' mutatedTimeSeries = [TimeSeries] 
;

Injection returns Injection:
	'injection' name=EString
	operation=XBlockExpression;
 
 
TimeSeries returns TimeSeries:
	name=EString
	('path' timeSeriesPath=STRING)?
	('[' timeValues+=TimeValue ("," timeValues+=TimeValue)* ']')?;


TimeValue returns TimeValue:
	{TimeValue} 
	'(' time=EDouble ':' value=(EDouble) ')';



Specification returns Specification:
	{Specification}
	'specification'
	('projectName' projectName=EString)?
	
	'components' ':' components+=Component*;

Discovery returns Discovery:
	{Discovery}
	'discovery'
	name=EString
	expression=XBlockExpression;




